
# Autochthon is a 32 bit, load and store architecture
#
#



instructions:

  # [Memory Access Instructions]
  #
  # Memory can be read/written in either 1 or 4 byte chunks
  - loadbyte: [reg, reg]
  - loadword: [reg, reg]
  - storebyte: [reg, reg]
  - storeword: [reg, reg]

  # Load the location of the nth symbol into a register.
  # Useful for calls across module boundaries and data access
  - loadsym: [word, reg]

  # Put a literal value into a register
  - fill: [word, reg]

  - push: [reg]
  - pop: [reg]
  - call: [reg]

  # [Branch Instructions]
  - test: [reg] # test a register against 0
  - cmp: [reg, reg] # compare to registers (first - second)
  - jump: [word] # ip relative unconditional jump
  - je: [word]
  - jne: [word]

  # [Arithmetic Instructions]
  - add: [reg, reg, reg]
  - sub: [reg, reg, reg]
  - mul: [reg, reg, reg]
  - div: [reg, reg, reg]
  - mod: [reg, reg, reg]

  # [IO Instructions]
  - ioreadbyte: [reg]
  - iowritebyte: [reg]

  - nop: []

  # Dump the contents of memory and registers to stdout of the interpreter
  - debug: []
  - exit: []


registers: [
  # The instruction pointer holds the address of the currently executing instruction
  ip,
  # The stack pointer is manipulated by push, pop, call, and ret instructions
  sp,
  # The frame pointer is technically general purpose, but the blessed calling
  # convention uses it to point to the start of each function's stack frame
  fp,
  # "Return Value" for function calls
  rv,
  # "Condition" register, holds the result of the last test instruction
  cond,
  # "Argument" registers, which are used to pass arguments to functions
  a1, a2, a3, a4,
  # "Register" registers, general purpose
  r1, r2, r3, r4
]

symbols:
  kind: [function, data]
  # Only public symbols can be linked with
  visibility: [public, private]
  # Internal linkage means that the symbol is defined in this module
  # External linkage means that this symbol needs to be resolved and needs
  #  to be provided by another module
  #
  linkage: [internal, external]

architecture:
  pagesize: 128

# Module Layout
# Module's need a name, which is appended to all symbols
# how do we handle symbol names?

# Symbol Table
# The symbol table for a module is a list of tuples:
#  (type[1byte], visibility[1byte], linkage[1byte], location[4byte])
# The location is an offset into the data segment of the module

# Module A: 'foo': (Function, Public, Internal, 0x100)
#           'bar': (Data, Private, Internal, 0x200)
# Module B: 'A::foo': (Function, Public, External, -1)
# <LINK>
# Module C: 'A::foo': (Function, Public, Internal, 0x100)

# Dynamically Allocated Memory
# maybe have an instruction (newpage) that fetches a new page and returns its address?
# the standard library could then have a malloc function that calls this on startup and
# stores the base address of the heap


# Paged Memory
# Memory is paged and each page has a writeable bit. Executability is the opposite
# of writeability.
# Writes to unmapped pages are allowed, and bring new pages in.
# Reads from unmapped pages are an exception.
# Ideally, the program is unaware of paging

# For fetching instructions, we could peek 1 byte from memory, then determine
# (based on opcode) how many more bytes to request

# IO
# read and write byte to stdio
# How does read string work? How do endlines get entered (see ~/test/test.c)
# It looks like both ^D and newline "submit" bytes to the process from the shell?